const TelegramBot = require('node-telegram-bot-api');
const OpenAI = require('openai');
const { Pool } = require('pg');
const cron = require('node-cron');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const ADMIN_USER_ID = process.env.ADMIN_USER_ID;
const DATABASE_URL = process.env.DATABASE_URL;

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

// –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö PostgreSQL
const pool = new Pool({
    connectionString: DATABASE_URL,
    ssl: { rejectUnauthorized: false }
});

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—å
async function initDatabase() {
    try {
        await pool.query(`CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            telegram_id BIGINT UNIQUE,
            name TEXT,
            stage TEXT DEFAULT '–∑–Ω–∞–π–æ–º—Å—Ç–≤–æ',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_interaction TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            mood_score INTEGER DEFAULT 5,
            settings JSONB DEFAULT '{}'
        )`);

        await pool.query(`CREATE TABLE IF NOT EXISTS messages (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            message TEXT,
            mood_score INTEGER,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            message_type TEXT DEFAULT 'user',
            tags TEXT
        )`);

        await pool.query(`CREATE TABLE IF NOT EXISTS achievements (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            title TEXT,
            description TEXT,
            date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )`);

        await pool.query(`CREATE TABLE IF NOT EXISTS mood_patterns (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            date DATE,
            morning_mood INTEGER,
            evening_mood INTEGER,
            notes TEXT
        )`);

        console.log('üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î:', error);
    }
}

class SupportBot {
    constructor() {
        this.moodKeywords = {
            positive: ['–¥–æ–±—Ä–µ', '—á—É–¥–æ–≤–æ', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å–Ω–æ', '—â–∞—Å–ª–∏–≤–∏–π', '—Ä–∞–¥—ñ—Å–Ω–æ', '–≤–¥–∞–ª–æ—Å—è'],
            negative: ['–ø–æ–≥–∞–Ω–æ', '—Å—É–º–Ω–æ', '–¥–µ–ø—Ä–µ—Å—ñ—è', '–≤–∞–∂–∫–æ', '–±–æ–ª–∏—Ç—å', '–≤—Ç–æ–º–ª–µ–Ω–∏–π', '—Å—Ç—Ä–µ—Å'],
            neutral: ['–Ω–æ—Ä–º–∞–ª—å–Ω–æ', '–∑–≤–∏—á–∞–π–Ω–æ', '—Ç–∞–∫ —Å–æ–±—ñ', '—Å–µ—Ä–µ–¥–Ω—å–æ']
        };
        this.setupHandlers();
        this.startCronJobs();
    }

    setupHandlers() {
        bot.onText(/\/start/, (msg) => this.handleStart(msg));
        bot.onText(/\/mood/, (msg) => this.handleMoodCheck(msg));
        bot.onText(/\/sos/, (msg) => this.handleSOS(msg));

        bot.on('message', (msg) => {
            if (!msg.text.startsWith('/')) {
                this.handleMessage(msg);
            }
        });

        bot.on('callback_query', (query) => this.handleCallback(query));
    }

    async handleStart(msg) {
        const userId = msg.from.id;
        const userName = msg.from.first_name || '–î—Ä—É–∂–µ';

        try {
            await pool.query(`INSERT INTO users (telegram_id, name) VALUES ($1, $2) 
                             ON CONFLICT (telegram_id) DO UPDATE SET name = $2`, 
                [userId, userName]);

            const welcomeMessage = `–ü—Ä–∏–≤—ñ—Ç, ${userName}! üëã

–Ø —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –µ–º–æ—Ü—ñ–π–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏. –Ø –±—É–¥—É:

üîπ –©–æ–¥–Ω—è —Ü—ñ–∫–∞–≤–∏—Ç–∏—Å—è —è–∫ —Ç–≤–æ—ó —Å–ø—Ä–∞–≤–∏
üîπ –ó–∞–ø–∞–º'—è—Ç–æ–≤—É–≤–∞—Ç–∏ –≤—Å–µ –Ω–∞—à–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è  
üîπ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Ç–≤—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å
üîπ –ù–∞–¥–∞–≤–∞—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ
üîπ –°–≤—è—Ç–∫—É–≤–∞—Ç–∏ —Ç–≤–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è

–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/mood - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π
/sos - –µ–∫—Å—Ç—Ä–µ–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞

–†–æ–∑–∫–∞–∂–∏ –º–µ–Ω—ñ –ø—Ä–æ —Å–µ–±–µ - —â–æ –∑–∞—Ä–∞–∑ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤ —Ç–≤–æ—î–º—É –∂–∏—Ç—Ç—ñ?`;

            bot.sendMessage(userId, welcomeMessage);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
            bot.sendMessage(userId, '–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.');
        }
    }

    async handleMessage(msg) {
        const userId = msg.from.id;
        const messageText = msg.text;
        
        try {
            const moodScore = this.analyzeMood(messageText);
            
            await pool.query(`INSERT INTO messages (user_id, message, mood_score) VALUES ($1, $2, $3)`,
                [userId, messageText, moodScore]);

            await pool.query(`UPDATE users SET last_interaction = CURRENT_TIMESTAMP, mood_score = $1 WHERE telegram_id = $2`,
                [moodScore, userId]);

            const response = await this.generateResponse(userId, messageText, moodScore);
            bot.sendMessage(userId, response);

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
            bot.sendMessage(userId, '–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ê–ª–µ —è —Ç—É—Ç —ñ –≥–æ—Ç–æ–≤–∏–π —Ç–µ–±–µ –≤–∏—Å–ª—É—Ö–∞—Ç–∏! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.');
        }
    }

    analyzeMood(text) {
        const lowerText = text.toLowerCase();
        let score = 5;

        this.moodKeywords.positive.forEach(word => {
            if (lowerText.includes(word)) score += 1;
        });

        this.moodKeywords.negative.forEach(word => {
            if (lowerText.includes(word)) score -= 1;
        });

        return Math.max(1, Math.min(10, score));
    }

    async generateResponse(userId, message, moodScore) {
        try {
            const prompt = `–¢–∏ –µ–º–æ—Ü—ñ–π–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. 
–ù–∞—Å—Ç—Ä—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (1-10): ${moodScore}
–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "${message}"

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ç–µ–ø–ª–æ, –ø—ñ–¥—Ç—Ä–∏–º—É—é—á–µ. –Ø–∫—â–æ –Ω–∞—Å—Ç—Ä—ñ–π –Ω–∏–∑—å–∫–∏–π (1-4) - –Ω–∞–¥–∞–≤–∞–π –±—ñ–ª—å—à–µ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏. 
–í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ 2-3 —Ä–µ—á–µ–Ω–Ω—è.`;

            const completion = await openai.chat.completions.create({
                model: "gpt-4o-mini",
                messages: [{ role: "user", content: prompt }],
                max_tokens: 200,
                temperature: 0.7
            });

            return completion.choices[0].message.content;
        } catch (error) {
            console.error('OpenAI Error:', error);
            return this.getFallbackResponse(moodScore);
        }
    }

    getFallbackResponse(moodScore) {
        if (moodScore <= 3) {
            return "–†–æ–∑—É–º—ñ—é, —â–æ –∑–∞—Ä–∞–∑ –≤–∞–∂–∫–æ. –Ø —Ç—É—Ç —ñ –≥–æ—Ç–æ–≤–∏–π –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–±–µ. –•–æ—á–µ—à –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ —Ü–µ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ?";
        } else if (moodScore >= 8) {
            return "–ß—É–¥–æ–≤–æ —á—É—Ç–∏ —Ç–∞–∫—ñ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ –Ω–æ–≤–∏–Ω–∏! –ü—Ä–æ–¥–æ–≤–∂—É–π –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ!";
        } else {
            return "–î—è–∫—É—é –∑–∞ —Ç–µ, —â–æ –ø–æ–¥—ñ–ª–∏–≤—Å—è. –Ø –∑–∞–≤–∂–¥–∏ –≥–æ—Ç–æ–≤–∏–π –≤–∏—Å–ª—É—Ö–∞—Ç–∏ —ñ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏";
        }
    }

    async handleSOS(msg) {
        const userId = msg.from.id;
        
        const sosMessage = `üÜò –†–æ–∑—É–º—ñ—é, —â–æ –∑–∞—Ä–∞–∑ –¥—É–∂–µ –≤–∞–∂–∫–æ. –¢–∏ –Ω–µ –æ–¥–∏–Ω.

–¢–µ—Ö–Ω—ñ–∫–∏ —à–≤–∏–¥–∫–æ—ó –¥–æ–ø–æ–º–æ–≥–∏:

ü´Å **–î–∏—Ö–∞–Ω–Ω—è 4-7-8**
–í–¥–∏—Ö–Ω–∏ –Ω–∞ 4, –∑–∞—Ç—Ä–∏–º–∞–π –Ω–∞ 7, –≤–∏–¥–∏—Ö–Ω–∏ –Ω–∞ 8

üßä **5-4-3-2-1 —Ç–µ—Ö–Ω—ñ–∫–∞**
5 —Ä–µ—á–µ–π —è–∫—ñ –±–∞—á–∏—à
4 —Ä–µ—á—ñ —è–∫—ñ —á—É—î—à  
3 —Ä–µ—á—ñ —è–∫—ñ –≤—ñ–¥—á—É–≤–∞—î—à
2 —Ä–µ—á—ñ —è–∫—ñ –Ω—é—Ö–∞—î—à
1 —Ä—ñ—á —è–∫—É –∫—É—à—Ç—É—î—à

üíô **–ü–∞–º'—è—Ç–∞–π**: —Ü—ñ –ø–æ—á—É—Ç—Ç—è —Ç–∏–º—á–∞—Å–æ–≤—ñ, —Ç–∏ —Å–ø—Ä–∞–≤–ª—è—î—à—Å—è –∫—Ä–∞—â–µ –Ω—ñ–∂ –¥—É–º–∞—î—à.

–•–æ—á–µ—à –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ —Ç–µ, —â–æ –∑–∞—Ä–∞–∑ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è?`;

        bot.sendMessage(userId, sosMessage);
    }

    async handleMoodCheck(msg) {
        const userId = msg.from.id;
        
        const keyboard = {
            inline_keyboard: [
                [
                    { text: "üò≠ 1", callback_data: "mood_1" },
                    { text: "üò¢ 2", callback_data: "mood_2" },
                    { text: "üòî 3", callback_data: "mood_3" }
                ],
                [
                    { text: "üòê 4", callback_data: "mood_4" },
                    { text: "üôÇ 5", callback_data: "mood_5" },
                    { text: "üòä 6", callback_data: "mood_6" }
                ],
                [
                    { text: "üòÑ 7", callback_data: "mood_7" },
                    { text: "üòÅ 8", callback_data: "mood_8" },
                    { text: "ü§© 9", callback_data: "mood_9" },
                    { text: "üöÄ 10", callback_data: "mood_10" }
                ]
            ]
        };

        bot.sendMessage(userId, "–Ø–∫ —Ç–≤—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π –∑–∞—Ä–∞–∑? (1-10)", { reply_markup: keyboard });
    }

    async handleCallback(query) {
        const userId = query.from.id;
        const data = query.data;

        try {
            if (data.startsWith('mood_')) {
                const mood = parseInt(data.split('_')[1]);
                await pool.query(`UPDATE users SET mood_score = $1 WHERE telegram_id = $2`, [mood, userId]);
                
                let response = `–ó–∞–ø–∏—Å–∞–≤ —Ç–≤—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π: ${mood}/10`;
                if (mood <= 3) {
                    response += "\n\n–•–æ—á–µ—à –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ —Ç–µ, —â–æ —Ç—É—Ä–±—É—î? –Ø —Ç—É—Ç –¥–ª—è —Ç–µ–±–µ";
                } else if (mood >= 8) {
                    response += "\n\n–í—ñ–¥–º—ñ–Ω–Ω–æ! –†–∞–¥—ñ—é —Ä–∞–∑–æ–º –∑ —Ç–æ–±–æ—é!";
                }
                
                bot.editMessageText(response, {
                    chat_id: userId,
                    message_id: query.message.message_id
                });
            }

            bot.answerCallbackQuery(query.id);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ callback:', error);
            bot.answerCallbackQuery(query.id, { text: '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑' });
        }
    }

    startCronJobs() {
        cron.schedule('0 9 * * *', () => {
            this.sendMorningCheckin();
        });

        cron.schedule('0 21 * * *', () => {
            this.sendEveningReflection();
        });
    }

    async sendMorningCheckin() {
        try {
            const result = await pool.query(`SELECT telegram_id, name FROM users WHERE telegram_id = $1`, [ADMIN_USER_ID]);
            
            result.rows.forEach(user => {
                const messages = [
                    `–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! ‚òÄÔ∏è –Ø–∫ –ø–ª–∞–Ω–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ?`,
                    `–ü—Ä–∏–≤—ñ—Ç! üåÖ –©–æ —Ö–æ—Ä–æ—à–æ–≥–æ —Å–ø–æ–¥—ñ–≤–∞—î—à—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ?`,
                    `–†–∞–Ω–æ–∫! ‚òï –Ø–∫ –Ω–∞—Å—Ç—Ä—ñ–π –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –¥–Ω—è?`
                ];
                
                const randomMessage = messages[Math.floor(Math.random() * messages.length)];
                bot.sendMessage(user.telegram_id, randomMessage);
            });
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–∞–Ω–∫–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
        }
    }

    async sendEveningReflection() {
        try {
            const result = await pool.query(`SELECT telegram_id, name FROM users WHERE telegram_id = $1`, [ADMIN_USER_ID]);
            
            result.rows.forEach(user => {
                bot.sendMessage(user.telegram_id, "–Ø–∫ –ø—Ä–æ–π—à–æ–≤ –¥–µ–Ω—å? üåô –ì–æ—Ç–æ–≤–∏–π –ø—ñ–¥–≤–µ—Å—Ç–∏ –ø—ñ–¥—Å—É–º–∫–∏?");
            });
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤–µ—á—ñ—Ä–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
        }
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
    await initDatabase();
    const supportBot = new SupportBot();
    console.log('ü§ñ Support Bot –∑–∞–ø—É—â–µ–Ω–æ!');
}

startBot().catch(console.error);

process.on('unhandledRejection', (err) => {
    console.error('Unhandled Promise Rejection:', err);
});

process.on('uncaughtException', (err) => {
    console.error('Uncaught Exception:', err);
    process.exit(1);
});
