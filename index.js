const TelegramBot = require('node-telegram-bot-api');
const OpenAI = require('openai');
const cron = require('node-cron');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const ADMIN_USER_ID = process.env.ADMIN_USER_ID; // –¢–≤—ñ–π Telegram ID

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

// –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
const db = new sqlite3.Database('support_bot.db');

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—å
db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        telegram_id INTEGER UNIQUE,
        name TEXT,
        stage TEXT DEFAULT '–∑–Ω–∞–π–æ–º—Å—Ç–≤–æ',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        last_interaction DATETIME DEFAULT CURRENT_TIMESTAMP,
        mood_score INTEGER DEFAULT 5,
        settings TEXT DEFAULT '{}'
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        message TEXT,
        mood_score INTEGER,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        message_type TEXT DEFAULT 'user',
        tags TEXT,
        FOREIGN KEY(user_id) REFERENCES users(telegram_id)
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS achievements (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        title TEXT,
        description TEXT,
        date DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(telegram_id)
    )`);

    db.run(`CREATE TABLE IF NOT EXISTS mood_patterns (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        date DATE,
        morning_mood INTEGER,
        evening_mood INTEGER,
        notes TEXT,
        FOREIGN KEY(user_id) REFERENCES users(telegram_id)
    )`);
});

class SupportBot {
    constructor() {
        this.moodKeywords = {
            positive: ['–¥–æ–±—Ä–µ', '—á—É–¥–æ–≤–æ', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å–Ω–æ', '—â–∞—Å–ª–∏–≤–∏–π', '—Ä–∞–¥—ñ—Å–Ω–æ', '–≤–¥–∞–ª–æ—Å—è'],
            negative: ['–ø–æ–≥–∞–Ω–æ', '—Å—É–º–Ω–æ', '–¥–µ–ø—Ä–µ—Å—ñ—è', '–≤–∞–∂–∫–æ', '–±–æ–ª–∏—Ç—å', '–≤—Ç–æ–º–ª–µ–Ω–∏–π', '—Å—Ç—Ä–µ—Å'],
            neutral: ['–Ω–æ—Ä–º–∞–ª—å–Ω–æ', '–∑–≤–∏—á–∞–π–Ω–æ', '—Ç–∞–∫ —Å–æ–±—ñ', '—Å–µ—Ä–µ–¥–Ω—å–æ']
        };
        this.setupHandlers();
        this.startCronJobs();
    }

    setupHandlers() {
        // –ö–æ–º–∞–Ω–¥–∏
        bot.onText(/\/start/, (msg) => this.handleStart(msg));
        bot.onText(/\/mood/, (msg) => this.handleMoodCheck(msg));
        bot.onText(/\/sos/, (msg) => this.handleSOS(msg));
        bot.onText(/\/achievements/, (msg) => this.showAchievements(msg));
        bot.onText(/\/stats/, (msg) => this.showStats(msg));
        bot.onText(/\/settings/, (msg) => this.showSettings(msg));

        // –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        bot.on('message', (msg) => {
            if (!msg.text.startsWith('/')) {
                this.handleMessage(msg);
            }
        });

        // Callback –∫–Ω–æ–ø–∫–∏
        bot.on('callback_query', (query) => this.handleCallback(query));
    }

    async handleStart(msg) {
        const userId = msg.from.id;
        const userName = msg.from.first_name || '–î—Ä—É–∂–µ';

        // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        db.run(`INSERT OR REPLACE INTO users (telegram_id, name) VALUES (?, ?)`, 
            [userId, userName]);

        const welcomeMessage = `–ü—Ä–∏–≤—ñ—Ç, ${userName}! üëã

–Ø —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –µ–º–æ—Ü—ñ–π–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏. –Ø –±—É–¥—É:

üîπ –©–æ–¥–Ω—è —Ü—ñ–∫–∞–≤–∏—Ç–∏—Å—è —è–∫ —Ç–≤–æ—ó —Å–ø—Ä–∞–≤–∏
üîπ –ó–∞–ø–∞–º'—è—Ç–æ–≤—É–≤–∞—Ç–∏ –≤—Å–µ –Ω–∞—à–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è  
üîπ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Ç–≤—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å
üîπ –ù–∞–¥–∞–≤–∞—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ
üîπ –°–≤—è—Ç–∫—É–≤–∞—Ç–∏ —Ç–≤–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è

–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/mood - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π
/sos - –µ–∫—Å—Ç—Ä–µ–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞
/achievements - —Ç–≤–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ—é
/settings - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è

–†–æ–∑–∫–∞–∂–∏ –º–µ–Ω—ñ –ø—Ä–æ —Å–µ–±–µ - —â–æ –∑–∞—Ä–∞–∑ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤ —Ç–≤–æ—î–º—É –∂–∏—Ç—Ç—ñ?`;

        bot.sendMessage(userId, welcomeMessage);
    }

    async handleMessage(msg) {
        const userId = msg.from.id;
        const messageText = msg.text;
        
        // –ê–Ω–∞–ª—ñ–∑ –Ω–∞—Å—Ç—Ä–æ—é
        const moodScore = this.analyzeMood(messageText);
        
        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        db.run(`INSERT INTO messages (user_id, message, mood_score) VALUES (?, ?, ?)`,
            [userId, messageText, moodScore]);

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        db.run(`UPDATE users SET last_interaction = CURRENT_TIMESTAMP, mood_score = ? WHERE telegram_id = ?`,
            [moodScore, userId]);

        // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        const response = await this.generateResponse(userId, messageText, moodScore);
        bot.sendMessage(userId, response);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
        this.checkForAchievements(userId, messageText);
    }

    analyzeMood(text) {
        const lowerText = text.toLowerCase();
        let score = 5; // –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π

        // –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ –º–∞—Ä–∫–µ—Ä–∏
        this.moodKeywords.positive.forEach(word => {
            if (lowerText.includes(word)) score += 1;
        });

        // –ù–µ–≥–∞—Ç–∏–≤–Ω—ñ –º–∞—Ä–∫–µ—Ä–∏  
        this.moodKeywords.negative.forEach(word => {
            if (lowerText.includes(word)) score -= 1;
        });

        return Math.max(1, Math.min(10, score));
    }

    async generateResponse(userId, message, moodScore) {
        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const context = await this.getUserContext(userId);
        
        const prompt = `–¢–∏ –µ–º–æ—Ü—ñ–π–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. 

–ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${JSON.stringify(context)}
–ü–æ—Ç–æ—á–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π (1-10): ${moodScore}
–û—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "${message}"

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ç–µ–ø–ª–æ, –ø—ñ–¥—Ç—Ä–∏–º—É—é—á–µ, –ø–∞–º'—è—Ç–∞–π –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ä–æ–∑–º–æ–≤–∏. –Ø–∫—â–æ –Ω–∞—Å—Ç—Ä—ñ–π –Ω–∏–∑—å–∫–∏–π (1-4) - –Ω–∞–¥–∞–≤–∞–π –±—ñ–ª—å—à–µ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏. –Ø–∫—â–æ –≤–∏—Å–æ–∫–∏–π (8-10) - —Å–≤—è—Ç–∫—É–π —Ä–∞–∑–æ–º.

–í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ 2-3 —Ä–µ—á–µ–Ω–Ω—è, —â–∏—Ä–∞ —Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.`;

        try {
            const completion = await openai.chat.completions.create({
                model: "gpt-4o-mini",
                messages: [{ role: "user", content: prompt }],
                max_tokens: 200,
                temperature: 0.7
            });

            return completion.choices[0].message.content;
        } catch (error) {
            console.error('OpenAI Error:', error);
            return this.getFallbackResponse(moodScore);
        }
    }

    getFallbackResponse(moodScore) {
        if (moodScore <= 3) {
            return "–†–æ–∑—É–º—ñ—é, —â–æ –∑–∞—Ä–∞–∑ –≤–∞–∂–∫–æ. –Ø —Ç—É—Ç —ñ –≥–æ—Ç–æ–≤–∏–π –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–±–µ. –•–æ—á–µ—à –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ —Ü–µ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ? üíô";
        } else if (moodScore >= 8) {
            return "–ß—É–¥–æ–≤–æ —á—É—Ç–∏ —Ç–∞–∫—ñ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ –Ω–æ–≤–∏–Ω–∏! –ü—Ä–æ–¥–æ–≤–∂—É–π –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ! üåü";
        } else {
            return "–î—è–∫—É—é –∑–∞ —Ç–µ, —â–æ –ø–æ–¥—ñ–ª–∏–≤—Å—è. –Ø –∑–∞–≤–∂–¥–∏ –≥–æ—Ç–æ–≤–∏–π –≤–∏—Å–ª—É—Ö–∞—Ç–∏ —ñ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ ü§ó";
        }
    }

    async getUserContext(userId) {
        return new Promise((resolve) => {
            db.get(`SELECT * FROM users WHERE telegram_id = ?`, [userId], (err, user) => {
                if (err) {
                    resolve({});
                    return;
                }

                db.all(`SELECT message, mood_score, timestamp FROM messages 
                        WHERE user_id = ? ORDER BY timestamp DESC LIMIT 10`, 
                    [userId], (err, messages) => {
                    
                    resolve({
                        stage: user?.stage || '–∑–Ω–∞–π–æ–º—Å—Ç–≤–æ',
                        lastMood: user?.mood_score || 5,
                        recentMessages: messages || []
                    });
                });
            });
        });
    }

    async handleSOS(msg) {
        const userId = msg.from.id;
        
        const sosMessage = `üÜò –†–æ–∑—É–º—ñ—é, —â–æ –∑–∞—Ä–∞–∑ –¥—É–∂–µ –≤–∞–∂–∫–æ. –¢–∏ –Ω–µ –æ–¥–∏–Ω.

–¢–µ—Ö–Ω—ñ–∫–∏ —à–≤–∏–¥–∫–æ—ó –¥–æ–ø–æ–º–æ–≥–∏:

ü´Å **–î–∏—Ö–∞–Ω–Ω—è 4-7-8**
–í–¥–∏—Ö–Ω–∏ –Ω–∞ 4, –∑–∞—Ç—Ä–∏–º–∞–π –Ω–∞ 7, –≤–∏–¥–∏—Ö–Ω–∏ –Ω–∞ 8

üßä **5-4-3-2-1 —Ç–µ—Ö–Ω—ñ–∫–∞**
5 —Ä–µ—á–µ–π —è–∫—ñ –±–∞—á–∏—à
4 —Ä–µ—á—ñ —è–∫—ñ —á—É—î—à  
3 —Ä–µ—á—ñ —è–∫—ñ –≤—ñ–¥—á—É–≤–∞—î—à
2 —Ä–µ—á—ñ —è–∫—ñ –Ω—é—Ö–∞—î—à
1 —Ä—ñ—á —è–∫—É –∫—É—à—Ç—É—î—à

üíô **–ü–∞–º'—è—Ç–∞–π**: —Ü—ñ –ø–æ—á—É—Ç—Ç—è —Ç–∏–º—á–∞—Å–æ–≤—ñ, —Ç–∏ —Å–ø—Ä–∞–≤–ª—è—î—à—Å—è –∫—Ä–∞—â–µ –Ω—ñ–∂ –¥—É–º–∞—î—à.

–•–æ—á–µ—à –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ —Ç–µ, —â–æ –∑–∞—Ä–∞–∑ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è?`;

        const keyboard = {
            inline_keyboard: [
                [{ text: "–¢–∞–∫, –¥–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º–æ", callback_data: "talk_sos" }],
                [{ text: "–ü–æ–∫–∞–∂–∏ –º–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è", callback_data: "show_achievements" }],
                [{ text: "–í–∫–ª—é—á–∏ —Ä–µ–∂–∏–º –ø—ñ–¥—Ç—Ä–∏–º–∫–∏", callback_data: "support_mode" }]
            ]
        };

        bot.sendMessage(userId, sosMessage, { reply_markup: keyboard });
    }

    async handleMoodCheck(msg) {
        const userId = msg.from.id;
        
        const keyboard = {
            inline_keyboard: [
                [
                    { text: "üò≠ 1", callback_data: "mood_1" },
                    { text: "üò¢ 2", callback_data: "mood_2" },
                    { text: "üòî 3", callback_data: "mood_3" }
                ],
                [
                    { text: "üòê 4", callback_data: "mood_4" },
                    { text: "üôÇ 5", callback_data: "mood_5" },
                    { text: "üòä 6", callback_data: "mood_6" }
                ],
                [
                    { text: "üòÑ 7", callback_data: "mood_7" },
                    { text: "üòÅ 8", callback_data: "mood_8" },
                    { text: "ü§© 9", callback_data: "mood_9" },
                    { text: "üöÄ 10", callback_data: "mood_10" }
                ]
            ]
        };

        bot.sendMessage(userId, "–Ø–∫ —Ç–≤—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π –∑–∞—Ä–∞–∑? (1-10)", { reply_markup: keyboard });
    }

    async handleCallback(query) {
        const userId = query.from.id;
        const data = query.data;

        if (data.startsWith('mood_')) {
            const mood = parseInt(data.split('_')[1]);
            db.run(`UPDATE users SET mood_score = ? WHERE telegram_id = ?`, [mood, userId]);
            
            let response = `–ó–∞–ø–∏—Å–∞–≤ —Ç–≤—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π: ${mood}/10`;
            if (mood <= 3) {
                response += "\n\n–•–æ—á–µ—à –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ —Ç–µ, —â–æ —Ç—É—Ä–±—É—î? –Ø —Ç—É—Ç –¥–ª—è —Ç–µ–±–µ üíô";
            } else if (mood >= 8) {
                response += "\n\n–í—ñ–¥–º—ñ–Ω–Ω–æ! –†–∞–¥—ñ—é —Ä–∞–∑–æ–º –∑ —Ç–æ–±–æ—é! üéâ";
            }
            
            bot.editMessageText(response, {
                chat_id: userId,
                message_id: query.message.message_id
            });
        }

        // –Ü–Ω—à—ñ callback handlers...
        bot.answerCallbackQuery(query.id);
    }

    checkForAchievements(userId, message) {
        // –î–µ—Ç–µ–∫—Ü—ñ—è –¥–æ—Å—è–≥–Ω–µ–Ω—å
        const achievements = [];
        const lowerMessage = message.toLowerCase();

        if (lowerMessage.includes('–∑–∞–∫—ñ–Ω—á–∏–≤') || lowerMessage.includes('–∑–∞–≤–µ—Ä—à–∏–≤')) {
            achievements.push({ title: "–ó–∞–≤–µ—Ä—à—É–≤–∞—á", description: "–î–æ–≤—ñ–≤ —Å–ø—Ä–∞–≤—É –¥–æ –∫—ñ–Ω—Ü—è!" });
        }
        
        if (lowerMessage.includes('–Ω–∞–≤—á–∏–≤—Å—è') || lowerMessage.includes('–≤–∏–≤—á–∏–≤')) {
            achievements.push({ title: "–°—Ç—É–¥–µ–Ω—Ç –∂–∏—Ç—Ç—è", description: "–û—Å–≤–æ—ó–≤ —â–æ—Å—å –Ω–æ–≤–µ!" });
        }

        achievements.forEach(achievement => {
            db.run(`INSERT INTO achievements (user_id, title, description) VALUES (?, ?, ?)`,
                [userId, achievement.title, achievement.description]);
            
            bot.sendMessage(userId, `üèÜ –ù–æ–≤–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è: "${achievement.title}"!\n${achievement.description}`);
        });
    }

    startCronJobs() {
        // –†–∞–Ω–∫–æ–≤–∏–π check-in (9:00)
        cron.schedule('0 9 * * *', () => {
            this.sendMorningCheckin();
        });

        // –í–µ—á—ñ—Ä–Ω—è —Ä–µ—Ñ–ª–µ–∫—Å—ñ—è (21:00)
        cron.schedule('0 21 * * *', () => {
            this.sendEveningReflection();
        });

        // –¢–∏–∂–Ω–µ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ (–Ω–µ–¥—ñ–ª—è 19:00)
        cron.schedule('0 19 * * 0', () => {
            this.sendWeeklyAnalysis();
        });
    }

    async sendMorningCheckin() {
        db.all(`SELECT telegram_id, name FROM users WHERE telegram_id = ?`, [ADMIN_USER_ID], (err, users) => {
            users.forEach(user => {
                const messages = [
                    `–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! ‚òÄÔ∏è –Ø–∫ –ø–ª–∞–Ω–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ?`,
                    `–ü—Ä–∏–≤—ñ—Ç! üåÖ –©–æ —Ö–æ—Ä–æ—à–æ–≥–æ —Å–ø–æ–¥—ñ–≤–∞—î—à—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ?`,
                    `–†–∞–Ω–æ–∫! ‚òï –Ø–∫ –Ω–∞—Å—Ç—Ä—ñ–π –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –¥–Ω—è?`
                ];
                
                const randomMessage = messages[Math.floor(Math.random() * messages.length)];
                bot.sendMessage(user.telegram_id, randomMessage);
            });
        });
    }

    async sendEveningReflection() {
        db.all(`SELECT telegram_id, name FROM users WHERE telegram_id = ?`, [ADMIN_USER_ID], (err, users) => {
            users.forEach(user => {
                const keyboard = {
                    inline_keyboard: [
                        [{ text: "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –¥–Ω–µ–º", callback_data: "share_day" }],
                        [{ text: "–û—Ü—ñ–Ω–∏—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π", callback_data: "rate_mood" }]
                    ]
                };

                bot.sendMessage(user.telegram_id, 
                    "–Ø–∫ –ø—Ä–æ–π—à–æ–≤ –¥–µ–Ω—å? üåô –ì–æ—Ç–æ–≤–∏–π –ø—ñ–¥–≤–µ—Å—Ç–∏ –ø—ñ–¥—Å—É–º–∫–∏?", 
                    { reply_markup: keyboard });
            });
        });
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
    await initDatabase();
    const supportBot = new SupportBot();
    console.log('ü§ñ Support Bot –∑–∞–ø—É—â–µ–Ω–æ!');
}

startBot().catch(console.error);

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
process.on('unhandledRejection', (err) => {
    console.error('Unhandled Promise Rejection:', err);
});

process.on('uncaughtException', (err) => {
    console.error('Uncaught Exception:', err);
    process.exit(1);
});

module.exports = { SupportBot, bot, pool };
